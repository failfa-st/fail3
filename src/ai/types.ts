/**
 * Represents the possible roles in a software development team.
 */
export type Role =
	| "FRONTEND_DEVELOPER"
	| "BACKEND_DEVELOPER"
	| "PROJECT_MANAGER"
	| "SCRUM_MANAGER"
	| "QA_ENGINEER"
	| "COPY_WRITER";

/**
 * Represents the possible role names in a software development team.
 */
export type RoleName =
	| "Frontend Developer"
	| "Backend Developer"
	| "Project Manager"
	| "Scrum Manager"
	| "QA Engineer"
	| "Copy Writer";

/**
 * Represents the version of an AI model.
 */
export type Model = "gpt-3.5-turbo" | "gpt-4";

/**
 * Represents the temperature parameter used in text generation by some NLP systems.
 */
export type Temperature = 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8;

/**
 * Represents an object that can be used to initialize an AI system with a specific configuration.
 */
export interface AIConstructor {
	/**
	 * The role that the AI should represent.
	 */
	role: Role;
}

/**
 * A configuration object used to define the characteristics of an AI persona.
 */
export interface Persona {
	/**
	 * The name of the role that the AI should represent.
	 */
	name: RoleName;

	/**
	 * The role that the AI should represent.
	 */
	role: Role;

	/**
	 * The temperature parameter used in text generation by the AI system.
	 */
	temperature: Temperature;

	/**
	 * The number of previous responses to include in the context for generating new responses.
	 */
	historyLimit: number;

	/**
	 * The maximum number of tokens to generate in the AI system's response.
	 */
	maxTokens: number;

	/**
	 * The instruction system being used to guide the behavior of the AI system.
	 */
	system: string;

	/**
	 * The version of the AI model being used.
	 */
	model: Model;
}

export interface Answer {
	/**
	 * The unique identifier for the response.
	 */
	id: string;

	/**
	 * The version of the AI model used for generating the response.
	 */
	model: Model;

	/**
	 * The role that the AI represents.
	 */
	role: Role;

	/**
	 * The response generated by the AI system.
	 */
	answer: string;
}
